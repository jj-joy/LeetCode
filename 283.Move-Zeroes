283.Move-Zeroes

Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Example:
Input: [0,1,0,3,12]
Output: [1,3,12,0,0]

Note:
You must do this in-place without making a copy of the array.
Minimize the total number of operations.


// the code will maintain the following invariant:
// 	1. All elements before the slow pointer (lastNonZeroFoundAt) are non-zeroes.
// 	2. All elements between the current and slow pointer are zeroes.
// 
// Therefore, when we encounter a non-zero element, we need to swap elements pointed by current and slow pointer, then advance both // pointers. If it's zero element, we just advance current pointer.
// 
// With this invariant in-place, it's easy to see that the algorithm will work.


func moveZeroes(nums []int)  {
    for lastNonZeroFoundAt, current := 0, 0; current < len(nums); current++ {
    	if nums[current] != 0 {
            tmp := nums[lastNonZeroFoundAt]
    		nums[lastNonZeroFoundAt] = nums[current]
    		nums[current] = tmp
    		lastNonZeroFoundAt++
    	}
    }
}
