0119.Pascal's_Triangle_II

Given a non-negative index k where k ≤ 33, return the kth index row of the Pascal's triangle.
Note that the row index starts from 0.

In Pascal's triangle, each number is the sum of the two numbers directly above it.

杨辉三角：
[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]

Example:
    Input: 3
    Output: [1,3,3,1]

Follow up:
Could you optimize your algorithm to use only O(k) extra space?


除了第一个和最后一个数字之外，其他的数字都是上一行左右两个值之和。
那么只需要两个for循环，除了第一个数为1之外，后面的数都是上一次循环的数值加上它前面位置的数值之和，不停地更新每一个位置的值，便可以得到第n行的数字。

func getRow(rowIndex int) []int {
    triangleRow := make([]int, rowIndex+1)
    for row := 0; row < rowIndex+1; row++ {
    	// 倒序，不用设置临时变量
        for i := row; i >= 0; i-- {
            if i == 0 || i == row {
                triangleRow[i] = 1
            } else {
                triangleRow[i] += triangleRow[i-1]
            }
        }
    }
    return triangleRow
}

