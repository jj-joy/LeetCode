0109.Convert_Sorted_List_to_Binary_Search_Tree
Medium

Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:
    Given the sorted linked list: [-10,-3,0,5,9],
    One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:
          0
         / \
       -3   9
       /   /
     -10  5


Approach : Inorder Simulation
Intuition
As we know, there are three different types of traversals for a binary tree:
    Inorder
    Preorder and
    Postorder traversals.
The inorder traversal on a binary search tree leads to a very interesting outcome.
    Elements processed in the inorder fashion on a binary search tree turn out to be sorted in ascending order.
The approach listed here make use of this idea to formulate the construction of a binary search tree. The reason we are able to use this idea in this problem is because we are given a sorted linked list initially.

The critical idea based on the inorder traversal that we will exploit to solve this problem, is:
    We know that the leftmost element in the inorder traversal has to be the head of our given linked list.
    Similarly, the next element in the inorder traversal will be the second element in the linked list and so on.
    This is made possible because the initial list given to us is sorted in ascending order.
Now that we have an idea about the relationship between the inorder traversal of a binary search tree and the numbers being sorted in ascending order, let's get to the algorithm.

/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func sortedListToBST(head *ListNode) *TreeNode {
    ptr := head
    size := 0

    for ptr != nil {
        ptr = ptr.Next
        size++
    }

    var convertSortedListToBST func(left, right int) *TreeNode
    convertSortedListToBST = func(left, right int) *TreeNode {
        if left > right {
            return nil
        }

        mid := (left + right) / 2

        // First step of simulated inorder traversal. Recursively form the left half
        leftNode := convertSortedListToBST(left, mid-1)

        // Once left half is traversed, process the current node
        node := &TreeNode{Val: head.Val}

        node.Left = leftNode

        // Maintain the invariance mentioned in the algorithm
        head = head.Next

        // Recurse on the right hand side and form BST out of them
        node.Right = convertSortedListToBST(mid+1, right)

        return node
    }

    return convertSortedListToBST(0, size-1)
}

