0169.Majority_Element

Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.
You may assume that the array is non-empty and the majority element always exist in the array.

Example 1:
    Input: [3,2,3]
    Output: 3

Example 2:
    Input: [2,2,1,1,1,2,2]
    Output: 2


Approach: Sorting
If the elements are sorted in monotonically increasing (or decreasing) order, the majority element can be found at index floor(n/2) (and floor(n/2)+1, incidentally, if n is even).
- - - -
0 1 2 3 4 5 6
      - - - -
- - - -
0 1 2 3 4 5
    - - - -

func majorityElement(nums []int) int {
    QuickSort(nums)
    return nums[len(nums)/2]
}

func QuickSort(array []int) {
    if len(array) <= 1 {
        return
    }
    
    tmp := array[0]
    i, j := 0, len(array)-1
    
    for i < j {
        for i < j && array[j] >= tmp {
            j--
        }
        if i < j {
            array[i] = array[j]
        }
        
        for i < j && array[i] < tmp {
            i++
        }
        if i < j {
            array[j] = array[i]
        }
    }
    
    array[i] = tmp
    
    QuickSort(array[:i])
    QuickSort(array[i+1:])
}

