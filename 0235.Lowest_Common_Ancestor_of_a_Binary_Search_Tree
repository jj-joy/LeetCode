0235.Lowest_Common_Ancestor_of_a_Binary_Search_Tree
Easy

Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Given binary search tree:  root = [6,2,8,0,4,7,9,null,null,3,5]

Example 1:
    Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
    Output: 6
    Explanation: The LCA of nodes 2 and 8 is 6.

Example 2:
    Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
    Output: 2
    Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.


Lets review properties of a BST:
	1. Left subtree of a node N contains nodes whose values are lesser than or equal to node N's value.
	2. Right subtree of a node N contains nodes whose values are greater than node N's value.
	3. Both left and right subtrees are also BSTs.

Approach: Recursive Approach
Intuition
Lowest common ancestor for two nodes p and q would be the last ancestor node common to both of them. 
Here last is defined in terms of the depth of the node. The below diagram would help in understanding what lowest means.

Algorithm
	1. Start traversing the tree from the root node.
	2. If both the nodes p and q are in the right subtree, then continue the search with right subtree starting step 1.
	3. If both the nodes p and q are in the left subtree, then continue the search with left subtree starting step 1.
	4. If both step 2 and step 3 are not true, this means we have found the node which is common to node p's and q's subtrees. and hence we return this common node as the LCA.

/**
 * Definition for TreeNode.
 * type TreeNode struct {
 *     Val int
 *     Left *ListNode
 *     Right *ListNode
 * }
 */
func lowestCommonAncestor(root, p, q *TreeNode) *TreeNode {
	if root == nil {
		return nil
	}

	if root.Val > p.Val && root.Val > q.Val {
		return lowestCommonAncestor(root.Left, p, q)
	} else if root.Val < p.Val && root.Val < q.Val {
		return lowestCommonAncestor(root.Right, p, q)
	} else {
		return root
	}
}

