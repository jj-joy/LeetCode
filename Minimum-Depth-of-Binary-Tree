Minimum-Depth-of-Binary-Tree

Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children.

Example:
Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its minimum depth = 2.


# 必须增加一个叶子的判断
# 因为如果一个节点如果只有左子树或者右子树, 不能取它左右子树中小的作为深度, 因为那样会是0
# 我们只有在叶子节点才能判断深度

/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func minDepth(root *TreeNode) int {
    if root == nil {
    	return 0
    }

    if root.Left == nil {
    	return minDepth(root.Right) + 1
    }
    if root.Right == nil {
    	return minDepth(root.Left) + 1
    }

    left := minDepth(root.Left)
    right := minDepth(root.Right)

    if left < right {
    	return left + 1
    } else {
    	return right + 1
    }
}
