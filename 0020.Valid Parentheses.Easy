0020.Valid Parentheses.Easy

Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.

Example 1:
Input: "()"
Output: true

Example 2:
Input: "()[]{}"
Output: true

Example 3:
Input: "(]"
Output: false

Example 4:
Input: "([)]"
Output: false

Example 5:
Input: "{[]}"
Output: true


Algorithm
Initialize a stack S.
Process each bracket of the expression one at a time.
If we encounter an opening bracket, we simply push it onto the stack. This means we will process it later, let us simply move onto the sub-expression ahead.
If we encounter a closing bracket, then we check the element on top of the stack. If the element at the top of the stack is an opening bracket of the same type, then we pop it off the stack and continue processing. Else, this implies an invalid expression.
In the end, if we are left with a stack still having elements, then this implies an invalid expression.

// FIFO队列

func isValid(s string) bool {
    parenthesesMap := map[rune]rune{')': '(', '}': '{', ']': '['}
    parenthesesStack := NewStack()

    for _, c := range(s) {
        // If the current character is a closing bracket.
    	if _, ok := parenthesesMap[c]; ok {
            // Get the top element of the stack. If the stack is empty OR If the mapping for this bracket doesn't match the stack's top element, return false.
            if parenthesesStack.IsEmpty() || parenthesesStack.Pop() != parenthesesMap[c] {
    			return false
    		}
    	} else {
            // If it was an opening bracket, push to the stack.
    		parenthesesStack.Push(c)
    	}
    }

    // If the stack still contains elements, then it is an invalid expression.
    return parenthesesStack.IsEmpty()  
}


type Stack struct {
    items []rune
}

func NewStack() *Stack {
	return &Stack{items: []rune{}}
}

func (s *Stack) Push(n rune) {
	s.items = append(s.items, n)
}

func (s *Stack) Pop() rune {
	l := len(s.items)
	res := s.items[l-1]
	s.items = s.items[:l-1]
	return res
}

func (s *Stack) IsEmpty() bool {
	return len(s.items) == 0
}

