0475.Heaters
Easy

Winter is coming! Your first job during the contest is to design a standard heater with fixed warm radius to warm all the houses.

Now, you are given positions of houses and heaters on a horizontal line, find out minimum radius of heaters so that all houses could be covered by those heaters.

So, your input will be the positions of houses and heaters seperately, and your expected output will be the minimum radius standard of heaters.

Note:
    1. Numbers of houses and heaters you are given are non-negative and will not exceed 25000.
    2. Positions of houses and heaters you are given are non-negative and will not exceed 10^9.
    3. As long as a house is in the heaters' warm radius range, it can be warmed.
    4. All the heaters follow your radius standard and the warm radius will the same.

Example 1:
    Input: [1,2,3],[2]
    Output: 1
    Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.
 
Example 2:
    Input: [1,2,3,4],[1,4]
    Output: 1
    Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.


解法一：
这道题是一道蛮有意思的题目，首先我们看题目中的例子，不管是houses还是heaters数组都是有序的，所以我们也需要给输入的这两个数组先排序，以免其为乱序。
我们就拿第二个例子来分析，我们的目标是houses中的每一个数字都要被cover到，那么我们就遍历houses数组，
对每一个数组的数字，我们在heaters中找能包含这个数字的左右范围，然后看离左右两边谁近取谁的值，
如果某个house位置比heaters中最小的数字还小，那么肯定要用最小的heater去cover，
反之如果比最大的数字还大，就用最大的数字去cover。
对于每个数字算出的半径，我们要取其中最大的值。
通过上面的分析，我们就不难写出代码了，我们在heater中两个数一组进行检查，
如果后面一个数和当前house位置差的绝对值小于等于前面一个数和当前house位置差的绝对值，说明heater后面还有更小的radius，那么我们继续遍历下一个位置的数。
跳出循环的条件是遍历到heater中最后一个数，或者上面的小于等于不成立，此时heater中的值和当前house位置的差的绝对值就是能cover当前house的最小半径，我们更新结果res即可

我们将房子、加热器都先排序，然后利用两层循环，外层遍历房子，内层遍历加热器，
每次获取到房子，就去比较对应位置的左右加热器，拿他们的位置值与当前房子的位置值之间的绝对值做比较，
如果右边的加热器的位置值绝对值小于左边的，就继续向右比较，也就是取当前房子在左右加热器之间的最小半径。
然后将当前的最小半径和上一次比较获得的最小半径取最大值，因为要覆盖所有的房子。

func findRadius(houses []int, heaters []int) int {
    QuickSort(houses)
    QuickSort(heaters)
    
    res := 0
    for i := 0; i < len(houses); i++ {
        j := 0
        for j < len(heaters)-1 && abs(heaters[j+1]-houses[i]) <= abs(heaters[j]-houses[i]) {
            j++
        }
        res = max(res, abs(heaters[j]-houses[i]))
    }
    
    return res
}


func QuickSort(array []int) {
    if len(array) <= 1 {
        return
    }

    i,j := 0,len(array)-1
    tmp := array[0]
    
    for i < j {
        for i < j && array[j] >= tmp {
            j--
        }
        if i < j {
            array[i] = array[j]
            i++
        }
        for i < j && array[i] < tmp {
            i++
        }
        if i < j {
            array[j] = array[i]
            j--
        }
    }
    array[i] = tmp
    
    QuickSort(array[:i])
    QuickSort(array[i+1:])
}

func abs(v int) int {
	if v < 0 {
		return -v
	}
	return v
}

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func min(a, b int) int {
	if a > b {
		return b
	}
	return a
}


解法二：
我们先将加热器排序，然后遍历houses中的元素，
我们使用二分法找到当前房子在加热器中的最小半径，即当前位置的房子在对应位置的加热器中，其左右加热器到房子之间的最小值，
然后比较所有房子的最小半径，在其中取最大值，即最大值所代表的的半径能够覆盖所有房子。

func findRadius(houses []int, heaters []int) int {
    heaters = MergeSort(heaters)

    res := 0
    for _, house := range houses {
        res = max(res, getMinDistance(house, heaters))
    }

    return res
}

func getMinDistance(house int, heaters []int) int {
    // 左右heaters到house的距离
    left, right := int(^uint(0) >> 1), int(^uint(0) >> 1)

    for l, r := 0, len(heaters); l < r; {
        m := (l + r) / 2
        dist := heaters[m] - house

        if dist > 0 {
            right = dist
            r = m
        } else if dist < 0 {
            left = -dist
            l = m + 1
        } else {
            return 0
        }
    }

    return min(left, right)
}

func MergeSort(array []int) []int {
    if len(array) <= 1 {
        return array
    }

    mid := len(array) / 2
    leftArray := MergeSort(array[:mid])
    rightArray := MergeSort(array[mid:])

    var res []int
    l, r := 0, 0

    for l < len(leftArray) && r < len(rightArray) {
        if leftArray[l] < rightArray[r] {
            res = append(res, leftArray[l])
            l++
        } else {
            res = append(res, rightArray[r])
            r++
        }
    }

    if l < len(leftArray) {
        res = append(res, leftArray[l:]...)
    }
    if r < len(rightArray) {
        res = append(res, rightArray[r:]...)
    }

    return res
}

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

func min(a, b int) int {
	if a > b {
		return b
	}
	return a
}

