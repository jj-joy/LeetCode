0401.BinaryWatch.Easy

A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59).
Each LED represents a zero or one, with the least significant bit on the right.

Given a non-negative integer n which represents the number of LEDs that are currently on, return all possible times the watch could represent.

Example:
    Input: n = 1
    Return: ["1:00", "2:00", "4:00", "8:00", "0:01", "0:02", "0:04", "0:08", "0:16", "0:32"]

Note:
    The order of output does not matter.
    The hour must not contain a leading zero, for example "01:00" is not valid, it should be "1:00".
    The minute must be consist of two digits and may contain a leading zero, for example "10:2" is not valid, it should be "10:02".


func readBinaryWatch(num int) []string {
    res := make([]string, 0, 8)

    for h := 0; h < 12; h++ {
        for m := 0; m < 60; m++ {
            if numberOf1Bits(h) + numberOf1Bits(m) == num {
                res = append(res, fmt.Sprintf("%d:%02d", h, m))
            }
        }
    }

    return res
}

func numberOf1Bits(num int) int {
    sum := 0
    for num > 0 {
        sum ++
        num &= (num - 1)
    }
    return sum
}


/*
	深度优先搜索是一种在开发爬虫早期使用较多的方法。
	它的目的是要达到被搜索结构的叶结点(即那些不包含任何超链的HTML文件)。
	在一个HTML文件中，当一个超链被选择后，被链接的HTML文件将执行深度优先搜索，即在搜索其余的超链结果之前必须先完整地搜索单独的一条链。
	深度优先搜索沿着HTML文件上的超链走到不能再深入为止，然后返回到某一个HTML文件，再继续选择该HTML文件中的其他超链。当不再有其他超链可选择时，说明搜索已经结束。 
*/

import (
	"fmt"
	"sort"
)

func readBinaryWatch(num int) []string {
	res := make([]string, 0, 8)
	leds := make([]bool, 10)

	var dfs func(int, int)
	dfs = func(idx, n int) {
		var h, m int
		if n == 0 {
			m, h = get(leds[:6]), get(leds[6:])
			if h < 12 && m < 60 {
				res = append(res, fmt.Sprintf("%d:%02d", h, m))
			}
			return
		}

		for i := idx; i < len(leds)-n+1; i++ {
			leds[i] = true
			dfs(i+1, n-1)
			leds[i] = false
		}
	}

	dfs(0, num)

	sort.Strings(res)

	return res
}

var bs = []int{1, 2, 4, 8, 16, 32}	

func get(leds []bool) int {
	var sum int
	size := len(leds)
	for i := 0; i < size; i++ {
		if leds[i] {
			sum += bs[i]
		}
	}

	return sum
}

