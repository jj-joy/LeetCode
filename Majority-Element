Majority-Element

Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Example 1:

Input: [3,2,3]
Output: 3
Example 2:

Input: [2,2,1,1,1,2,2]
Output: 2

func majorityElement(nums []int) int {
    keyMap := make(map[int]int)
    for _, num := range nums {
        if _, ok := keyMap[num]; !ok {
            keyMap[num] = 1
        } else {
            keyMap[num] += 1
        }
        if keyMap[num] > int(len(nums)/2) {
            return num
        }
    }
    return -1
}


If the elements are sorted in monotonically increasing (or decreasing) order, the majority element can be found at index n/2 (and n/2+1, incidentally, if nn is even).

import "sort"
func majorityElement(nums []int) int {
    sort.Ints(nums)
    return nums[len(nums)/2]
}
