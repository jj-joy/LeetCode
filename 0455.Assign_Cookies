0455.Assign_Cookies

Assume you are an awesome parent and want to give your children some cookies.
But, you should give each child at most one cookie.
Each child i has a greed factor g(i), which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s(j).
If s(j) >= g(i), we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.

Note:
You may assume the greed factor is always positive.
You cannot assign more than one cookie to one child.

Example 1:
    Input: [1,2,3], [1,1]
    Output: 1
    Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3.
    And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.
    You need to output 1.

Example 2:
    Input: [1,2], [1,2,3]
    Output: 2
    Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2.
    You have 3 cookies and their sizes are big enough to gratify all of the children,
    You need to output 2.


首先对两个数组进行排序，让小的在前面。
然后我们先拿最小的cookie给胃口最小的小朋友，看能否满足，能的话，我们结果res自加1，然后再拿下一个cookie去满足下一位小朋友；
如果当前cookie不能满足当前小朋友，那么我们就用下一块稍大一点的cookie去尝试满足当前的小朋友。
当cookie发完了或者小朋友没有了我们停止遍历


func findContentChildren(g []int, s []int) int {
    g = MergeSort(g)
    s = MergeSort(s)

    var i, j, res int
    for i < len(g) && j < len(s) {
        if g[i] <= s[j] {
            i++
            res++
        }
        j++
    }

    return res
}

func MergeSort(array []int) []int {
    if len(array) <= 1 {
        return array
    }

    mid := len(array) / 2
    leftArray := MergeSort(array[:mid])
    rightArray := MergeSort(array[mid:])

    var res []int
    l, r := 0, 0
    for  l < len(leftArray) && r < len(rightArray) {
        if leftArray[l] < rightArray[r] {
            res = append(res, leftArray[l])
            l++
        } else {
            res = append(res, rightArray[r])
            r++
        }
    }

    if l < len(leftArray) {
        res = append(res, leftArray[l:]...)
    }
    if r < len(rightArray) {
        res = append(res, rightArray[r:]...)
    }

    return res
}

func QuickSort(array []int) {
    if len(array) <= 1 {
        return
    }

    i,j := 0,len(array)-1
    tmp := array[0]

    for i < j {
        for i < j && array[j] >= tmp {
            j--
        }
        if i < j {
            array[i] = array[j]
            i++
        }
        
        for i < j && array[i] < tmp {
            i++  
        }
        if i < j {
            array[j] = array[i];
            j--
        }
    }
    array[i] = tmp

    QuickSort(array[:i])
    QuickSort(array[i+1:])
}

