0021.Merge Two Sorted Lists.Easy

Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.

Example:
Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4


解题思路：
把两个排序好的链合并，要求合并后依然是排序好的。

解题步骤如下：
设置好链接头head和用于移动节点指针current
利用for循环反复比较，每次选取较小的节点，放在current.Next
处理l1或l2中剩余的节点


/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {
	/*
		head初始化一个空ListNode，结果直接返回head.Next，这样可以简化其中一条链为nil的判断以及head和current的初始化。

		if l1 == nil {
			return l2
		}
		if l2 == nil {
			return l1
		}

		var current, head *ListNode
		if l1.Val < l2.Val {
			current = l1
			head = l1
			l1 = l1.Next
		} else {
			current = l2
			head = l2
			l2 = l2.Next
		}
	*/


    head := &ListNode{}
    current := head

    for l1 != nil && l2 != nil {
    	if l1.Val < l2.Val {
    		current.Next = l1
    		l1 = l1.Next
    	} else {
    		current.Next = l2
    		l2 = l2.Next
    	}
    	current = current.Next
    }

    if l1 != nil {
    	current.Next = l1
    }
    if l2 != nil {
    	current.Next = l2
    }

    return head.Next
}
