0412.Fizz_Buzz

Write a program that outputs the string representation of numbers from 1 to n.

But for multiples of three it should output “Fizz” instead of the number and for the multiples of five output “Buzz”. For numbers which are multiples of both three and five output “FizzBuzz”.

Example:
    n = 15,
    Return:
    [
        "1",
        "2",
        "Fizz",
        "4",
        "Buzz",
        "Fizz",
        "7",
        "8",
        "Fizz",
        "Buzz",
        "11",
        "Fizz",
        "13",
        "14",
        "FizzBuzz"
    ]


Approach 1: Naive Approach
Intuition
The moment you hear of FizzBuzz you think whether the number is divisible by 3, 5 or both.

import "strconv"
    
func fizzBuzz(n int) []string {
    var res []string

    for i:=1; i<=n; i++ {
        switch {
        case i%15 == 0:
            res = append(res, "FizzBuzz")
        case i%3 == 0:
            res = append(res, "Fizz")
        case i%5 == 0:
            res = append(res, "Buzz")
        default:
            res = append(res, strconv.Itoa(i))
        }
    }

    return res
}


Approach 2: String Concatenation
Intuition
This approach won't reduce the asymptotic complexity, but proves to be a neater solution when FizzBuzz comes with a twist.
What if FizzBuzz is now FizzBuzzJazz i.e.
    3 ---> "Fizz" , 5 ---> "Buzz", 7 ---> "Jazz"
If you try to solve this with the previous approach the program would have too many conditions to check:
    1.Divisible by 3
    2.Divisible by 5
    3.Divisible by 7
    4.Divisible by 3 and 5
    5.Divisible by 3 and 7
    6.Divisible by 7 and 3
    7.Divisible by 3 and 5 and 7
    8.Not divisible by 3 or 5 or 7.
This way if the FizzBuzz mappings increase, the conditions would grow exponentially in your program.

func fizzBuzz(n int) []string {
    var res []string

    for i:=1; i<=n; i++ {
        numAnsStr := ""

        if i % 3 == 0 {
            numAnsStr += "Fizz"
        }
        if i % 5 == 0 {
            numAnsStr += "Buzz"
        }
        if numAnsStr == "" {
            numAnsStr += strconv.Itoa(i)
        }

        res = append(res, numAnsStr)
    }

    return res
}

