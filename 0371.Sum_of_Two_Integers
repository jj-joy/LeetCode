0371.Sum_of_Two_Integers

Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.

Example 1:
    Input: a = 1, b = 2
    Output: 3

Example 2:
    Input: a = -2, b = 3
    Output: 1


让我们实现两数相加，但是不能用加号或者其他什么数学运算符号，那么我们只能回归计算机运算的本质，位操作 Bit Manipulation.
我们在做加法运算的时候，每位相加之后可能会有进位 Carry 产生，然后在下一位计算时需要加上进位一起运算，那么我们能不能将两部分拆开呢?
我们来看一个例子 759+674
    1. 如果我们不考虑进位，可以得到 323
    2. 如果我们只考虑进位，可以得到 1110
    3. 我们把上面两个数字相加 323+1110=1433 就是最终结果了

然后我们进一步分析，如果得到上面的第一第二种情况，我们在二进制下来看:
    不考虑进位的加: 0+0=0, 0+1=1, 1+0=1, 1+1=0，这就是'异或'的运算规则。
    只考虑进位的加: 0+0=0, 0+1=0, 1+0=0, 1+1=1，这就是'与'的运算规则。
而第三步在将两者相加时，我们再递归调用这个算法，终止条件是当进位为0时，直接返回第一步的结果。


func getSum(a int, b int) int {
    for a != 0 {
        a, b = (a&b)<<1, a^b
    }
    return b
}

