0206.Reverse_Linked_List

Reverse a singly linked list.

Example:
    Input: 1->2->3->4->5->NULL
    Output: 5->4->3->2->1->NULL

Follow up:
A linked list can be reversed either iteratively or recursively. Could you implement both?


/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */

Approach #1 (Iterative)
Assume that we have linked list 1 → 2 → 3 → Ø, we would like to change it to Ø ← 1 ← 2 ← 3.

While you are traversing the list, change the current node's next pointer to point to its previous element. 
Since a node does not have reference to its previous node, you must store its previous element beforehand. 
You also need another pointer to store the next node before changing the reference. 
Do not forget to return the new head reference at the end!

func reverseList(head *ListNode) *ListNode {
    var prev *ListNode
    curr := head
    
    for curr != nil {
        curr, curr.Next, prev = curr.Next, prev, curr
    }
    
    return prev
}


Approach #2 (Recursive)
The recursive version is slightly trickier and the key is to work backwards. 
Assume that the rest of the list had already been reversed, now how do I reverse the front part? 
Let's assume the list is: n(1) → … → n(k-1) → n(k) → n(k+1) → … → n(m) → Ø

Assume from node n(k+1) to n(m) had been reversed and you are at node n(k).
n(1) → … → n(k-1) → n(k) → n(k+1) ← … ← n(m)

We want n(k+1)’s next node to point to n(k).
So,
n(k).next.next = n(k);

Be very careful that n(1)'s next must point to Ø. If you forget about this, your linked list has a cycle in it. This bug could be caught if you test your code with a linked list of size 2.
n(k).next = Ø

func reverseList(head *ListNode) *ListNode {
    if head == nil || head.Next == nil {
        return head
    }

    newHead := reverseList(head.Next)	// 先反转后面的链表，从最后面的两个结点开始反转，依次向前
    head.Next.Next = head	// 将后一个链表结点指向前一个结点
    head.Next = nil			// 将原链表中前一个结点指向后一个结点的指向关系断开

    return newHead
}

