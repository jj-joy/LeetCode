0111.Minimum_Depth_of_Binary_Tree

Given a binary tree, find its minimum depth.
The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children.

Example:
    Given binary tree [3,9,20,null,null,15,7],
        3
       / \
      9  20
        /  \
       15   7
    return its minimum depth = 2.


/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func minDepth(root *TreeNode) int {
    if root == nil {
        return 0
    }
    
    left := minDepth(root.Left)
    right := minDepth(root.Right)
    
    // 必须增加一个叶子的判断，只有在叶子节点才能判断深度
    // 因为如果一个节点如果只有左子树或者右子树, 不能取它左右子树中小的作为深度, 那样会是0
    if left == 0 || right == 0 {
        return left + right + 1
    }
    
    return min(left, right) + 1
}

func min(a, b int) int {
    if a < b {
        return a
    }
    return b
}

