448.Find-All-Numbers-Disappeared-in-an-Array

Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.
Find all the elements of [1, n] inclusive that do not appear in this array.
Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.

Example:
Input:
[4,3,2,7,8,2,3,1]
Output:
[5,6]


第一种解法，这种解法的思路路是，对于每个数字nums[i]，如果其对应的nums[nums[i]-1]是正数，我们就赋值为其相反数，如果已经是负数了，就不变了，那么最后我们只要把留下的整数对应的位置加入结果res中即可。

[4,3,2,7,8,2,3,1]

[4,3,2,-7,8,2,3,1]
[4,3,-2,-7,8,2,3,1]
[4,-3,-2,-7,8,2,3,1]
[4,-3,-2,-7,8,2,-3,1]
[4,-3,-2,-7,8,2,-3,-1]
[4,-3,-2,-7,8,2,-3,-1]
[4,-3,-2,-7,8,2,-3,-1]
[-4,-3,-2,-7,8,2,-3,-1]

func findDisappearedNumbers(nums []int) []int {
    for i,_ := range nums {
        idx := abs(nums[i]) - 1
    	if nums[idx] > 0 {
    		nums[idx] = -nums[idx]
    	}
    }

    var res []int
    for i,_ := range nums {
    	if nums[i] > 0 {
    		res = append(res, i+1)
    	}
    }

    return res
}

func abs(n int) int {
	if n < 0 {
		return -n
	}
	return n
}



第二种方法是将nums[i]置换到其对应的位置nums[nums[i]-1]上去，
比如对于没有缺失项的正确的顺序应该是[1, 2, 3, 4, 5, 6, 7, 8]，而我们现在却是[4,3,2,7,8,2,3,1]，
我们需要把数字移动到正确的位置上去，比如第一个4就应该和7先交换个位置，以此类推，最后得到的顺序应该是[1, 2, 3, 4, 3, 2, 7, 8]，
我们最后在对应位置检验，如果nums[i]和i+1不等，那么我们将i+1存入结果res中即可

func findDisappearedNumbers(nums []int) []int {
    for i:=0; i<len(nums); i++ {
	    if (nums[i] != nums[nums[i]-1]) {
	        nums[i], nums[nums[i]-1] = nums[nums[i]-1], nums[i]
	        // 此处很精妙，一直迭代到nums[i]处理完成
	        i--
	    }
    }

    var res []int
    for i,_ := range nums {
    	if nums[i] != i+1 {
    		res = append(res, i+1)
    	}
    }

    return res
}
