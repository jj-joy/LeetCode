0441.Arranging_Coins

You have a total of n coins that you want to form in a staircase shape, where every k-th row must have exactly k coins.
Given n, find the total number of full staircase rows that can be formed.
n is a non-negative integer and fits within the range of a 32-bit signed integer.

Example 1:
    n = 5
    The coins can form the following rows:
    ¤
    ¤ ¤
    ¤ ¤
    Because the 3rd row is incomplete, we return 2.

Example 2:
    n = 8
    The coins can form the following rows:
    ¤
    ¤ ¤
    ¤ ¤ ¤
    ¤ ¤
    Because the 4th row is incomplete, we return 3.


Approach : Binary Search

Assume that the answer is k, i.e. we've managed to complete k rows of coins.
These completed rows contain in total 1 + 2 + ... + k = k * (k+1) / 2

We could now reformulate the problem as follows:
Find the maximum kk such that k * (k+1) / 2 <= N.

The problem seems to be one of those search problems.
And instead of naive iteration, one could resort to another more efficient algorithm called binary search, as we can find in another similar problem called search insert position.


func arrangeCoins(n int) int {
    left, right := 0, n

    for left <= right {
        mid := (left + right) / 2
        curr := mid * (mid + 1) / 2
        if curr < n {
            left = mid + 1
        } else if curr > n {
            right = mid - 1
        } else {
            return mid
        }
    }

    return right
}

