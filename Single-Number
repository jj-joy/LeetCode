Single-Number

Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,1]
Output: 1
Example 2:

Input: [4,1,2,1,2]
Output: 4


Concept
If we take XOR of zero and some bit, it will return that bit
a⊕0=a
If we take XOR of two same bits, it will return 0
a⊕a=0
a⊕b⊕a=(a⊕a)⊕b=0⊕b=b
So we can XOR all bits together to find the unique number.


func singleNumber(nums []int) int {
    // for i := 1; i < len(nums); i = i+1 {
    //     s = s ^ nums[i]
    // }
    s := 0
    for _, n := range nums {
        s = s ^ n
    }
    return s
}
