0003.Longest_Substring_Without_Repeating_Characters

Given a string, find the length of the longest substring without repeating characters.

Example 1:
    Input: "abcabcbb"
    Output: 3
    Explanation: The answer is "abc", with the length of 3.

Example 2:
    Input: "bbbbb"
    Output: 1
    Explanation: The answer is "b", with the length of 1.

Example 3:
    Input: "pwwkew"
    Output: 3
    Explanation: The answer is "wke", with the length of 3.
                 Note that the answer must be a substring, "pwke" is a subsequence and not a substring.


Approach 1: Sliding Window
Algorithm
If a substring s_{ij} from index i to j - 1 is already checked to have no duplicate characters. We only need to check if s[j] is already in the substring s_{ij}.
To check if a character is already in the substring, we can scan the substring, which leads to an O(n^2) algorithm. But we can do better.
By using HashSet as a sliding window, checking if a character in the current can be done in O(1).
A sliding window is an abstract concept commonly used in array/string problems. A window is a range of elements in the array/string which usually defined by the start and end indices, i.e. [i, j) (left-closed, right-open). A sliding window is a window "slides" its two boundaries to the certain direction. For example, if we slide [i, j) to the right by 1 element, then it becomes [i+1, j+1) (left-closed, right-open).
Back to our problem. We use HashSet to store the characters in current window [i, j) (j = i initially). Then we slide the index j to the right. If it is not in the HashSet, we slide j further. Doing so until s[j] is already in the HashSet. At this point, we found the maximum size of substrings without duplicate characters start with index i. If we do this for all i, we get our answer.

func lengthOfLongestSubstring(s string) int {
    ans := 0
    hashMap := make(map[byte]int)

    for i, j := 0, 0; i < len(s) && j < len(s); {
        if _, ok := hashMap[s[j]]; !ok {
            hashMap[s[j]] = j
            j++
            ans = max(ans, j - i)
        } else {
            delete(hashMap, s[i])
            i++
        }
    }

    return ans
}

func max(x, y int) int {
    if x < y {
        return y
    }
    return x
}


Approach 2: Sliding Window Optimized
The above solution requires at most 2n steps. In fact, it could be optimized to require only n steps. Instead of using a set to tell if a character exists or not, we could define a mapping of the characters to its index. Then we can skip the characters immediately when we found a repeated character.
The reason is that if s[j] have a duplicate in the range [i, j) with index j', we don't need to increase i little by little. We can skip all the elements in the range [i, j'] and let i to be j' + 1 directly.
滑动窗口是数组/字符串问题中常用的抽象方法。
如果s[j]在range [i, j)中重复键的索引是j'，不必逐次递增i来滑动窗口，可以直接跳过range [i, j']中的所有元素，并且直接把i设置为j' + 1

func lengthOfLongestSubstring(s string) int {
    n := len(s)
    ans := 0
    hashMap := make(map[byte]int)
    
    for i, j := 0, 0; j < n; j++ {
        if _, ok := hashMap[s[j]]; ok {
            i = max(hashMap[s[j]], i)
        }
        ans = max(ans, j - i + 1)
        hashMap[s[j]] = j + 1
    }
    
    return ans
}

func max(x, y int) int {
    if x < y {
        return y
    }
    return x
}

