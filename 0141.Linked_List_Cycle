0141.Linked_List_Cycle

Given a linked list, determine if it has a cycle in it.

To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. 
If pos is -1, then there is no cycle in the linked list.


Approach: Two Pointers

Intuition
Imagine two runners running on a track at different speed. What happens when the track is actually a circle?

Algorithm
The space complexity can be reduced to O(1) by considering two pointers at different speed - a slow pointer and a fast pointer. 
The slow pointer moves one step at a time while the fast pointer moves two steps at a time.

If there is no cycle in the list, the fast pointer will eventually reach the end and we can return false in this case.

Now consider a cyclic list and imagine the slow and fast pointers are two runners racing around a circle track. 
The fast runner will eventually meet the slow runner. 
Why? Consider this case (we name it case A) - The fast runner is just one step behind the slow runner. 
In the next iteration, they both increment one and two steps respectively and meet each other.

How about other cases? For example, we have not considered cases where the fast runner is two or three steps behind the slow runner yet. 
This is simple, because in the next or next's next iteration, this case will be reduced to case A mentioned above.

这是一道非常经典的双指针题。
我们从头设置一个快指针，一个慢指针。
快指针一次走两步，慢指针一次走一步，如果快指针走到了尽头，则说明链表无环。
如果快指针和慢指针相遇，则说明链表有环。
为什么相遇就说明有环呢？设想一个有环链表，快慢指针最后都会走到环上，而这个环就像一个环形跑道一样，慢指针在后面，快指针在前面，
但实际上快指针也在追慢指针，希望能超慢指针一圈。
他们在这个跑道上，总会有一天快指针追上了慢指针。
我们不用担心快指针跳过了慢指针，因为他们两的速度差是1，所以她们俩在环上的距离总是每次减1，最后总能减到0。

/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func hasCycle(head *ListNode) bool {
    fast, slow := head, head
    
    for fast != nil && fast.Next != nil {
        fast = fast.Next.Next
        slow = slow.Next
        if fast == slow {
            return true
        }
    }
    
    return false
}

