172.Factorial-Trailing-Zeroes

Given an integer n, return the number of trailing zeroes in n!.

Example 1:
Input: 3
Output: 0
Explanation: 3! = 6, no trailing zero.

Example 2:
Input: 5
Output: 1
Explanation: 5! = 120, one trailing zero.

Note: Your solution should be in logarithmic time complexity.

思路如下：
这里我们要求n!末尾有多少个0，因为我们知道0是2和5相乘得到的，而在1到n这个范围内，2的个数要远多于5的个数，所以这里只需计算从1到n这个范围内有多少个5就可以了。
思路已经清楚，下面就是一些具体细节，这个细节还是很重要的。
我在最开始的时候就想错了，直接返回了n / 5，但是看到题目中有要求需要用O(logn)的时间复杂度，就能够想到应该没这么简单。举连个例子：
例1
n=15。那么在15! 中 有3个5(来自其中的5, 10, 15)， 所以计算n/5就可以。
例2
n=25。与例1相同，计算n/5，可以得到5个5，分别来自其中的5, 10, 15, 20, 25，但是在25中其实是包含2个5的，这一点需要注意。
所以除了计算n/5， 还要计算n/5/5, n/5/5/5, n/5/5/5/5, ..., n/5/5/5,,,/5直到商为0，然后就和，就是最后的结果。


func trailingZeroes(n int) int {
	res := 0
	for n>=5 {
		n /= 5
		res += n
	}
	return res
}
