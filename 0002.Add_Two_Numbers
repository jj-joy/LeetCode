0002.Add_Two_Numbers
Medium

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit.
Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:
    Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
    Output: 7 -> 0 -> 8
    Explanation: 342 + 465 = 807.


/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {
    dummyHead := &ListNode{}
    curr := dummyHead
    carry := 0

    for l1 != nil || l2 != nil {
        v1, v2 := 0, 0
        if l1 != nil {
            v1 = l1.Val
        }
        if l2 != nil {
            v2 = l2.Val
        }

        sum := v1 + v2 + carry

        carry = sum / 10

        curr.Next = &ListNode{Val: sum % 10}
        curr = curr.Next

        if l1 != nil {
            l1 = l1.Next
        }
        if l2 != nil {
            l2 = l2.Next
        }
    }

    if carry > 0 {
        curr.Next = &ListNode{Val: carry}
    }

    return dummyHead.Next
}

