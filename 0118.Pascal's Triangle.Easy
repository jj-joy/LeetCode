Given a non-negative integer numRows, generate the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it.

Example:
Input: 5
Output:
[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]

Algorithm
Although the algorithm is very simple, the iterative approach to constructing Pascal's triangle can be classified as dynamic programming because we construct each row based on the previous row.
First, we generate the overall triangle list, which will store each row as a sublist. 
Then, we check for the special case of 0, as we would otherwise return [1]. 
If numRows > 0, then we initialize triangle with [1] as its first row, and proceed to fill the rows


func generate(numRows int) [][]int {
    triangle := make([][]int, numRows)
    for row := 0; row < numRows; row++ {
        triangle[row] = make([]int, row+1)
        for i:=0; i<row+1; i++ {
            if i == 0 || i == row {
                triangle[row][i] = 1
            } else {
                triangle[row][i] = triangle[row-1][i] + triangle[row-1][i-1]
            }
        }
    }
    return triangle
}

