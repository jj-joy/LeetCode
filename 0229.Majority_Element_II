0229.Majority_Element_II
Medium

Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.
Note: The algorithm should run in linear time and in O(1) space.

Example 1:
    Input: [3,2,3]
    Output: [3]

Example 2:
    Input: [1,1,1,3,3,2,2,2]
    Output: [1,2]


这道题让我们求出现次数大于n/3的众数，而且限定了时间和空间复杂度，那么就不能排序，也不能使用哈希表，这么苛刻的限制条件只有一种方法能解了，那就是摩尔投票法Moore Voting。
摩尔投票法的核心：对拼抵消，删除不同的数。玩一个诸侯争霸的游戏，假设你方人口超过总人口一半以上，并且能保证每个人口出去干仗都能一对一同归于尽。最后还有人活下来的国家就是胜利。那就大混战呗，最差所有人都联合起来对付你（对应你每次选择作为计数器的数都是众数），或者其他国家也会相互攻击（会选择其他数作为计数器的数），但是只要你们不要内斗，最后肯定你赢。最后能剩下的必定是自己人。

题目中给了一条很重要的提示，让我们先考虑可能会有多少个众数，经过举了很多例子分析得出，任意一个数组出现次数大于n/3的众数最多有两个，具体的证明省略。
了这个信息，我们使用投票法的核心是找出两个候选众数进行投票，需要两遍遍历，第一遍历找出两个候选众数，第二遍遍历重新投票验证这两个候选众数是否为众数即可。
满足要求的众数可能不存在，所以要有验证。

func majorityElement(nums []int) []int {
    if len(nums) <= 1 {
        return nums
    }
    
    candidate1, candidate2 := 0, 0
    count1, count2 := 0, 0
    
    for _, num := range nums {
        if num == candidate1 {
            count1++
        } else if num == candidate2 {
            count2++
        } else if count1 == 0 {
            candidate1, count1 = num, 1
        } else if count2 == 0 {
            candidate2, count2 = num, 1
        } else {
            count1--
            count2--
        }
    }
    
    majority := []int{}
    if isMajority(nums, candidate1) {
        majority = append(majority, candidate1)
    }
    if candidate1 != candidate2 && isMajority(nums, candidate2) {
        majority = append(majority, candidate2)
    }
    return majority
}

func isMajority(nums []int, n int) bool {
    c := 0
    for _, num := range nums {
        if num == n {
            c++
        }
    }
    return c > (len(nums) / 3)
}

