0202.Happy Number.Easy

Write an algorithm to determine if a number is "happy".

A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.

Example: 
Input: 19
Output: true
Explanation: 
1*1 + 9*9 = 82
8*8 + 2*2 = 68
6*6 + 8*8 = 100
1*1 + 0*0 + 0*0 = 1


跟之前那道 Linked List Cycle 检测环的方法类似，不同的是这道题环一定存在，不过有的环不符合题意，只有最后 slow 停在了1的位置，才表明是一个快乐数。
而且这里每次慢指针走一步，快指针走两步，不是简单的指向next，而是要调用子函数计算各位上数字的平方和，当快慢指针相等时，跳出循环，并且判断慢指针是否为1即可。


func isHappy(n int) bool {
    slow, fast := n, trans(n)
    for slow != fast {
    	slow = trans(slow)
    	fast = trans(trans(fast))
    }
    if slow == 1 {
    	return true
    }
    return false
}


func trans(n int) int {
	res := 0
	for n != 0 {
		res += (n%10) * (n%10)
		n /= 10
	}
	return res
}

