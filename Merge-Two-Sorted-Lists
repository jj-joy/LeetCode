Merge-Two-Sorted-Lists

Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.

Example:

Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4

解题思路
把两个排序好的链合并，要求合并后依然是排序好的。

结题步骤如下：
先处理其中一条链为nil的情况，直接返回另一条链，这样可以简化后面的判断条件。
设置好链接头head和用于移动节点指针node
利用for循环反复比较，每次选取较小的节点，放在node.Next
处理l1或l2中剩余的节点

总结
合理地安排步骤，可以有效地减轻后面的判断条件和处理步骤，让整个函数更清晰易懂。


/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {
    if l1 == nil {
		return l2
	}
	if l2 == nil {
		return l1
	}
    
	var node, head *ListNode
    if l1.Val < l2.Val {
    	node = l1
    	head = l1
    	l1 = l1.Next
    } else {
    	node = l2
    	head = l2
    	l2 = l2.Next
    }
    
    for l1 != nil && l2 != nil {
		if l1.Val < l2.Val {
			node.Next = l1
			l1 = l1.Next
		} else {
			node.Next = l2
			l2 = l2.Next
		}

		// 有了这一步，head才是一个完整的链
		node = node.Next
	}
    
    if l1 != nil {
		node.Next = l1
	}
	if l2 != nil {
		node.Next = l2
	}
    
    return head
}
