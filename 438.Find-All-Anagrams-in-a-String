438.Find-All-Anagrams-in-a-String

Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:
Input:
s: "cbaebabacd" p: "abc"
Output:
[0, 6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".

Example 2:
Input:
s: "abab" p: "ab"
Output:
[0, 1, 2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".


func findAnagrams(s string, p string) []int {
	var res = []int{}

	var target, window [26]int
	for i := 0; i < len(p); i++ {
		target[p[i]-'a']++
	}

	check := func(i int) {
		if window == target {
			res = append(res, i)
		}
	}

	for i := 0; i < len(s); i++ {
		window[s[i]-'a']++

		// 滑动窗口右移
		if i >= len(p)-1 {
			// 滑动窗口形成, 左边界为s[0]
			if i-len(p)>=0 {
				// 滑动窗口左外侧字符清除
				window[s[i-len(p)]-'a']--
			}
			
			check(i-len(p)+1)
		}
	}

	return res
		
}