0101.Symmetric_Tree

Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:
    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following [1,2,2,null,3,null,3] is not:
    1
   / \
  2   2
   \   \
   3    3
Note:
Bonus points if you could solve it both recursively and iteratively.


Approach 1: Recursive
A tree is symmetric if the left subtree is a mirror reflection of the right subtree.
Therefore, the question is: when are two trees a mirror reflection of each other?
Two trees are a mirror reflection of each other if:
	1.Their two roots have the same value.
	2.The right subtree of each tree is a mirror reflection of the left subtree of the other tree.

This is like a person looking at a mirror. The reflection in the mirror has the same head, but the reflection's right arm corresponds to the actual person's left arm, and vice versa.

/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func isSymmetric(root *TreeNode) bool {
    return isMirrorTree(root, root)
}

func isMirrorTree(t1 *TreeNode, t2 *TreeNode) bool {
    if t1 == nil && t2 == nil {
        return true
    }
    
    if t1 == nil || t2 == nil {
        return false
    }
    
    return t1.Val == t2.Val && isMirrorTree(t1.Left, t2.Right) && isMirrorTree(t1.Right, t2.Left)
}


Approach 2: Iterative
Instead of recursion, we can also use iteration with the aid of a queue. Each two consecutive nodes in the queue should be equal, and their subtrees a mirror of each other. Initially, the queue contains root and root. Then the algorithm works similarly to BFS, with some key differences. Each time, two nodes are extracted and their values compared. Then, the right and left children of the two nodes are inserted in the queue in opposite order. The algorithm is done when either the queue is empty, or we detect that the tree is not symmetric (i.e. we pull out two consecutive nodes from the queue that are unequal).

func isSymmetric(root *TreeNode) bool {
    if root == nil {
        return true
    }
    queue := []*TreeNode{}
    queue = append(queue, root.Left)
    queue = append(queue, root.Right)
    for len(queue) > 0 {
    	t1 := queue[len(queue)-1]
    	t2 := queue[len(queue)-2]
    	queue = queue[:len(queue)-2]
    	if t1==nil && t2==nil {
    		continue
    	}
		if t1==nil || t2==nil {
			return false
		}
		if t1.Val != t2.Val {
			return false
		}
		queue = append(queue, t1.Left)
		queue = append(queue, t2.Right)
		queue = append(queue, t1.Right)
		queue = append(queue, t2.Left)
    }
    return true
}

