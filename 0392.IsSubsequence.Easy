0392.IsSubsequence.Easy

Given a string s and a string t, check if s is subsequence of t.

A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ace" is a subsequence of "abcde" while "aec" is not).

Example 1:
    Input: s = "abc", t = "ahbgdc"
    Output: true

Example 2:
    Input: s = "axc", t = "ahbgdc"
    Output: false

Constraints:
    0 <= s.length <= 100
    0 <= t.length <= 10^4
    Both strings consists only of lowercase characters.


func isSubsequence(s string, t string) bool {
    var i, j = 0, 0

	for i < len(s) && j < len(t) {
        if s[i] == t[j] {
            i++
        }
        j++
    }
    return i == len(s)
}


Follow up:
If there are lots of incoming S, say S1, S2, ... , Sk where k >= 1B, and you want to check one by one to see if T has its subsequence.
In this scenario, how would you change your code?

题目中的 Follow up 说如果有大量的字符串s，问我们如何进行优化。那么既然字符串t始终保持不变，我们就可以在t上做一些文章。
子序列虽然不需要是连着的子串，但是字符之间的顺序是需要的，那么我们可以建立字符串t中的每个字符跟其位置直接的映射，由于t中可能会出现重复字符，所以把相同的字符出现的所有位置按顺序加到一个数组中，所以就是用 HashMap 来建立每个字符和其位置数组之间的映射。
然后遍历字符串s中的每个字符，对于每个遍历到的字符c，我们到 HashMap 中的对应的字符数组中去搜索，由于位置数组是有序的，我们使用二分搜索来加快搜索速度，这里需要注意的是，由于子序列是有顺序要求的，所以需要一个变量 prev 来记录当前匹配到t字符串中的位置，对于当前s串中的字符c，即便在t串中存在，但是若其在位置 prev 之前，也是不能匹配的。所以我们可以使用 BinarySearchHighBound() 来二分查找第一个大于 prev 的位置，若不存在，直接返回 false，否则将 prev 更新为二分查找的结果并继续循环即可。

func isSubsequence(s string, t string) bool {
	indexMap := make(map[int32][]int)

	for i, c := range t {
		indexMap[c] = append(indexMap[c], i)
	}

	prev := -1
	for _, c := range s {
		j := BinarySearchHighBound(indexMap[c], prev)
		if j < 0 {
			return false
		}
		prev = indexMap[c][j]
	}

	return true
}

func BinarySearchHighBound(nums []int, target int) int {
	low, high := 0, len(nums)-1

	for low <= high {
		mid := (low + high) / 2
		if nums[mid] <= target {
			low = mid + 1
		} else {
			if mid == 0 || nums[mid - 1] <= target {
				return mid
			} else {
				high = mid - 1
			}
		}
	}

	return -1
}

