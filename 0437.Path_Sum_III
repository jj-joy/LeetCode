0437.Path_Sum_III

You are given a binary tree in which each node contains an integer value.
Find the number of paths that sum to a given value.
The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).
The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.

Example:
    root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8
          10
         /  \
        5   -3
       / \    \
      3   2   11
     / \   \
    3  -2   1
    Return 3. The paths that sum to 8 are:
    1.  5 -> 3
    2.  5 -> 2 -> 1
    3. -3 -> 11


/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */

func pathSum(root *TreeNode, sum int) int {
    if root == nil {
        return 0
    }

    count := 0

    var dfs func(*TreeNode, int)
    dfs = func(node *TreeNode, sum int) {
        if node == nil {
            return
        }

        if node.Val == sum {
            count++
        }

        // In situation 1, the tree path with the target sum starts from the root.
        dfs(node.Left, sum - node.Val)
        dfs(node.Right, sum - node.Val)
    }

    dfs(root, sum)

    // In situation 2, the tree path with the target sum starts somewhere downwards.
    return count + pathSum(root.Left, sum) + pathSum(root.Right, sum)
}


Approach : Prefix Sum
In this article, we're going to discuss simple but powerful prefix sum technique: one pass + linear time complexity.
Prefix sum is a sum of the current value with all previous elements starting from the beginning of the structure.
Algorithm
Let's initialize tree paths counter count = 0, and the hashmap h "prefix sum -> how many times was it seen so far".
One could parse the tree using recursive preorder traversal: node -> left -> right: preorder(node: TreeNode, curr_sum: int) -> None.
This function takes two arguments: a tree node and a prefix sum before that node.
To start the recursion chain, one should call preorder(root, 0).
    The first thing is to update the current prefix sum by adding the value of the current node: curr_sum += node.val.
    Now one could update the counter. One should consider two situations.
        In situation 1, the tree path with the target sum starts from the root. That means the current prefix sum is equal to the target sum curr_sum == k, so one should increase the counter by 1: count += 1.
        In situation 2, the tree path with the target sum starts somewhere downwards. That means we should add to the counter the number of times we have seen the prefix sum curr_sum - target so far: count += h[curr_sum - target].
        The logic is simple: the current prefix sum is curr_sum, and several elements before the prefix sum was curr_sum - target. All the elements in between sum up to curr_sum - (curr_sum - target) = target.
    Now it's time to update the hashmap: h[curr_sum] += 1.
    Let's parse left and right subtrees: preorder(node.left, curr_sum), preorder(node.right, curr_sum).
    Now the current subtree is processed. It's time to remove the current prefix sum from the hashmap, in order not to blend the parallel subtrees: h[curr_sum] -= 1.
Now the preorder traversal is done, and the counter is updated. Return it.

func pathSum(root *TreeNode, sum int) int {
    count := 0
    h := make(map[int]int)

    var preOrder func(*TreeNode, int)
    preOrder = func(node *TreeNode, currSum int) {
        if node == nil {
            return
        }

        // current prefix sum
        currSum += node.Val

        // here is the sum we're looking for
        if currSum == sum {
            count++
        }

        // number of times the curr_sum âˆ’ k has occured already,
        // determines the number of times a path with sum k
        // has occured upto the current node
        if _, ok := h[currSum - sum]; !ok {
            h[currSum - sum] = 0
        }
        count += h[currSum - sum]

        // add the current sum into hashmap
        // to use it during the child nodes processing
        if _, ok := h[currSum]; !ok {
            h[currSum] = 0
        }
        h[currSum]++

        // process subtree
        preOrder(node.Left, currSum)
        preOrder(node.Right, currSum)

        // remove the current sum from the hashmap
        // in order not to use it during
        // the parallel subtree processing
        h[currSum]--
    }

    preOrder(root, 0)

    return count
}

