0326.PowerOfThree.Easy

Given an integer, write a function to determine if it is a power of three.

Example 1:
    Input: 27
    Output: true

Example 2:
    Input: 0
    Output: false

Example 3:
    Input: 9
    Output: true

Example 4:
    Input: 45
    Output: false


Approach : Loop Iteration

func isPowerOfThree(n int) bool {
    for n > 0 && n % 3 == 0 {
        n /= 3
    }
    return n == 1
}


Follow up:
Could you do it without using any loop / recursion ???

Approach : Integer Limitations
the maximum value of n that is also a power of three is 3^19 = 1162261467
Therefore, the possible values of n where we should return true are 3^0, 3^1, ... 3^19.
Since 3 is a prime number, the only divisors of 3^19 are 3^0, 3^1, ... 3^19, therefore all we need to do is divide 3^19 by n.
A remainder of 0 means n is a divisor of 3^19 and therefore a power of three.

func isPowerOfThree(n int) bool {
    return n > 0 && 1162261467 % n == 0
}

