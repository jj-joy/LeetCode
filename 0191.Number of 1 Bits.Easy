0191.Number of 1 Bits.Easy

Write a function that takes an unsigned integer and return the number of '1' bits it has (also known as the Hamming weight).

Example 1:
Input: 00000000000000000000000000001011
Output: 3
Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.

Example 2:
Input: 00000000000000000000000010000000
Output: 1
Explanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.

Example 3:
Input: 11111111111111111111111111111101
Output: 31
Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.


func hammingWeight(num uint32) int {
    sum := 0
    for num > 0 {
        sum += int(num & 0x1)
        num >>= 1
    }
    return sum
}


We can make the previous algorithm simpler and a little faster. 
Instead of checking every bit of the number, we repeatedly flip the least-significant 1-bit of the number to 0, and add 1 to the sum. 
As soon as the number becomes 0, we know that it does not have any more 1-bits, and we return the sum.

The key idea here is to realize that for any number n, doing a bit-wise AND of n and n-1 flips the least-significant 1-bit in n to 0. 
Why? Consider the binary representations of n and n-1.
In the binary representation, the least significant 1-bit in n always corresponds to a 0-bit in n-1. 
Therefore, adding the two numbers n and n-1 always flips the least significant 1-bit in n to 0, and keeps all other bits the same.

          least significant 1-bit
                     |
        n  ... 1 1 0 1 0 0
      n-1  ... 1 1 0 0 1 1
n & (n-1)  ... 1 1 0 0 0 0

Using this trick, the code becomes very simple.

func hammingWeight(num uint32) int {
    sum := 0
    for num > 0 {
        sum ++
        num &= (num - 1)
    }
    return sum
}

