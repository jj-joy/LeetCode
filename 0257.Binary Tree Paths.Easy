0257.Binary Tree Paths.Easy

Given a binary tree, return all root-to-leaf paths.
Note: A leaf is a node with no children.

Example:
Input:
   1
 /   \
2     3
 \
  5
Output: ["1->2->5", "1->3"]

Explanation: All root-to-leaf paths are: 1->2->5, 1->3


/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */

import (
	"strconv"
)

func binaryTreePaths(root *TreeNode) []string {
    if root == nil {
        return nil
    }
    
    paths := make([]string, 0, 16)
    
    var dfs func(*TreeNode, string)
    dfs = func(node *TreeNode, path string) {
        if node.Left == nil && node.Right == nil {
            paths = append(paths, path + strconv.Itoa(node.Val))
        }
        if node.Left != nil {
            dfs(node.Left, path + strconv.Itoa(node.Val) + "->")
        }
        if node.Right != nil {
            dfs(node.Right, path + strconv.Itoa(node.Val) + "->")
        }
    }
    
    dfs(root, "")
    
    return paths
}

