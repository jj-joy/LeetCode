Reverse-Linked-List

Reverse a singly linked list.

Example:

Input: 1->2->3->4->5->NULL
Output: 5->4->3->2->1->NULL
Follow up:

A linked list can be reversed either iteratively or recursively. Could you implement both?


/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func reverseList(head *ListNode) *ListNode {
    if head == nil || head.Next == nil {
        return head
    }

    newHead := reverseList(head.Next)	// 先反转后面的链表，从最后面的两个结点开始反转，依次向前
    head.Next.Next = head	// 将后一个链表结点指向前一个结点
    head.Next = nil			// 将原链表中前一个结点指向后一个结点的指向关系断开

    return newHead
}

func reverseList(head *ListNode) *ListNode {
    if head == nil || head.Next == nil {
        return head
    }

    var tmp *ListNode
    pre, cur := head, head.Next
    for cur != nil {
    	tmp = cur.Next	// tmp用来记录当前结点的下一个节点的位置
    	cur.Next = pre
    	pre = cur
    	cur = tmp
    }
    head.Next = nil
    return pre
}
