Given a sorted linked list, delete all duplicates such that each element appear only once.

Example 1:
Input: 1->1->2
Output: 1->2
Example 2:

Input: 1->1->2->3->3
Output: 1->2->3


This is a simple problem that merely tests your ability to manipulate list node pointers. 
Because the input list is sorted, we can determine if a node is a duplicate by comparing its value to the node after it in the list. 
If it is a duplicate, we change the next pointer of the current node so that it skips the next node and points directly to the one after the next node.


/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func deleteDuplicates(head *ListNode) *ListNode {
    current := head
    for current != nil && current.Next != nil {
        if current.Val == current.Next.Val {
            current.Next = current.Next.Next;
        } else {
            current = current.Next
        }
    }
    return head
}
