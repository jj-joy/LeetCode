0342.Power_of_Four

Given an integer (signed 32 bits), write a function to check whether it is a power of 4.

Example 1:
    Input: 16
    Output: true

Example 2:
    Input: 5
    Output: false


func isPowerOfFour(num int) bool {
    for num > 0 && num % 4 == 0 {
        num /= 4
    }
    return num == 1
}


Follow up: Could you solve it without loops/recursion?

下面这种方法是网上比较流行的一种解法，思路很巧妙。
首先根据 Power of Two 中的解法二，我们知道 num & (num - 1) 可以用来判断一个数是否为2的次方数，更进一步说，就是二进制表示下，只有最高位是1，那么由于是2的次方数，不一定是4的次方数，比如8，所以我们还要其他的限定条件。
仔细观察可以发现，4的次方数的最高位的1都是奇数位，那么只需 num & 0x55555555 (1010101010101010101010101010101)，如果得到的数还是其本身，则可以肯定其为4的次方数。

func isPowerOfFour(num int) bool {
    return num > 0 && (num & (num-1)) == 0 && (num & 0x55555555) == num
    // 0x55555555 is to get rid of those power of 2 but not power of 4
    // so that the single 1 bit always appears at the odd position
}

